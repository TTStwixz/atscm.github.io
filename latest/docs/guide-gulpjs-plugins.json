{"content":"<h1 id=\"guide-gulpjs-plugins\">Guide: gulp.js plugins</h1><blockquote>\n<p><strong>Please note:</strong> This guide assumes you have a basic knowledge on how gulp.js and custom <em>atscm</em> transformers work. You may go through <a href=\"https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md\">gulp&#39;s getting started guide</a> or the <a href=\"https://atscm.github.io/atscm/manual/tutorial/custom-transformer.html\">custom transformer tutorial</a> first otherwise.</p>\n</blockquote>\n<p><em>atscm</em> heavily relies on the <a href=\"http://gulpjs.com\">gulp.js</a> build tool. Therefore it&#39;s pretty easy to integrate existing <a href=\"http://gulpjs.com/plugins/\">gulp plugins</a> into <em>atscm</em> transformers.</p>\n<h2 id=\"using-transformer-class\">Using <em>Transformer</em> class</h2><p>Basically, the only Transformer method you have to override is <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-applyToStream\">Transformer#applyToStream</a>. In there, you can pipe your gulp plugin just as you would do in a regular gulp project. The only difference is, that you have to handle the current transform direction as well:</p>\n<p><strong>A basic example:</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Transformer, TransformDirection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;\n<span class=\"hljs-keyword\">import</span> fromDBGulpPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'gulp-plugin-to-use-from-db'</span>;\n<span class=\"hljs-keyword\">import</span> fromFSGulpPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'gulp-plugin-to-use-from-fs'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Transformer</span> </span>{\n  applyToStream(stream, direction) {\n    <span class=\"hljs-keyword\">if</span> (direction === TransformDirection.FromDB) {\n      <span class=\"hljs-keyword\">return</span> stream.pipe(fromDBGulpPlugin(<span class=\"hljs-comment\">/* plugin options */</span>));\n    }\n\n    <span class=\"hljs-keyword\">return</span> stream.pipe(fromFSGulpPlugin(<span class=\"hljs-comment\">/* plugin options */</span>));\n  }\n}</code></pre>\n<h2 id=\"using-partialtransformer-class\">Using <em>PartialTransformer</em> class</h2><p>In most cases you&#39;ll have to transform only parts of the piped files. This can be done by inheriting from <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html\">PartialTransfomer class</a>:</p>\n<p><strong>Transforming only JavaScript files:</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { PartialTransformer, TransformDirection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;\n<span class=\"hljs-keyword\">import</span> fromDBGulpPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'gulp-plugin-to-use-from-db'</span>;\n<span class=\"hljs-keyword\">import</span> fromFSGulpPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'gulp-plugin-to-use-from-fs'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPartialTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransformer</span> </span>{\n  shouldBeTransformed(file) {\n    <span class=\"hljs-keyword\">return</span> file.extname === <span class=\"hljs-string\">'.js'</span>;\n  }\n\n  applyToFilteredStream(stream, direction) {\n    <span class=\"hljs-keyword\">if</span> (direction === TransformDirection.FromDB) {\n      <span class=\"hljs-keyword\">return</span> stream.pipe(fromDBGulpPlugin(<span class=\"hljs-comment\">/* plugin options */</span>));\n    }\n\n    <span class=\"hljs-keyword\">return</span> stream.pipe(fromFSGulpPlugin(<span class=\"hljs-comment\">/* plugin options */</span>));\n  }\n}</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2><p>Using existing gulp plugins is probably the easiest way to use custom transformers inside an <em>atscm</em> project. As there are <strong>thousands of well-tested gulp-plugins</strong> out there, you won&#39;t have to implemtent any transform logic in most cases.</p>\n<p>Give it a try!</p>\n<h2 id=\"further-reading\">Further reading</h2><ul>\n<li>Take a look at <a href=\"http://gulpjs.com/plugins/\">gulp&#39;s plugin page</a> for a list of available plugins.</li>\n</ul>\n","sections":[{"title":"Using Transformer class","slug":"using-transformer-class"},{"title":"Using PartialTransformer class","slug":"using-partialtransformer-class"},{"title":"Conclusion","slug":"conclusion"},{"title":"Further reading","slug":"further-reading"}],"title":"Guide: gulp.js plugins"}